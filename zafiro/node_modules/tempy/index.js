'use strict';
const fs = require('fs');
const path = require('path');
const uniqueString = require('unique-string');
const tempDir = require('temp-dir');
<<<<<<< HEAD
const isStream = require('is-stream');
const del = require('del');
const stream = require('stream');
const {promisify} = require('util');

const pipeline = promisify(stream.pipeline);
const {writeFile} = fs.promises;

const getPath = (prefix = '') => path.join(tempDir, prefix + uniqueString());

const writeStream = async (filePath, data) => pipeline(data, fs.createWriteStream(filePath));

const createTask = (tempyFunction, {extraArguments = 0} = {}) => async (...arguments_) => {
	const [callback, options] = arguments_.slice(extraArguments);
	const result = await tempyFunction(...arguments_.slice(0, extraArguments), options);
	await callback(result);
	await del(result, {force: true});
};

module.exports.file = options => {
	options = {
=======

const getPath = () => path.join(tempDir, uniqueString());

module.exports.file = options => {
	options = {
		extension: '',
>>>>>>> apetey
		...options
	};

	if (options.name) {
<<<<<<< HEAD
		if (options.extension !== undefined && options.extension !== null) {
=======
		if (options.extension) {
>>>>>>> apetey
			throw new Error('The `name` and `extension` options are mutually exclusive');
		}

		return path.join(module.exports.directory(), options.name);
	}

<<<<<<< HEAD
	return getPath() + (options.extension === undefined || options.extension === null ? '' : '.' + options.extension.replace(/^\./, ''));
};

module.exports.file.task = createTask(module.exports.file);

module.exports.directory = ({prefix = ''} = {}) => {
	const directory = getPath(prefix);
=======
	return getPath() + '.' + options.extension.replace(/^\./, '');
};

module.exports.directory = () => {
	const directory = getPath();
>>>>>>> apetey
	fs.mkdirSync(directory);
	return directory;
};

<<<<<<< HEAD
module.exports.directory.task = createTask(module.exports.directory);

module.exports.write = async (data, options) => {
	const filename = module.exports.file(options);
	const write = isStream(data) ? writeStream : writeFile;
	await write(filename, data);
	return filename;
};

module.exports.write.task = createTask(module.exports.write, {extraArguments: 1});

module.exports.writeSync = (data, options) => {
	const filename = module.exports.file(options);
	fs.writeFileSync(filename, data);
	return filename;
};

=======
>>>>>>> apetey
Object.defineProperty(module.exports, 'root', {
	get() {
		return tempDir;
	}
});
