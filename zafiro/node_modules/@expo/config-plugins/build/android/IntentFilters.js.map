<<<<<<< HEAD
{"version":3,"file":"IntentFilters.js","names":["_androidPlugins","data","require","_Manifest","GENERATED_TAG","withAndroidIntentFilters","createAndroidManifestPlugin","setAndroidIntentFilters","exports","getIntentFilters","config","_config$android$inten","_config$android","android","intentFilters","androidManifest","_mainActivity$intent","_mainActivity$intent2","mainActivity","getMainActivityOrThrow","length","filter","value","_value$$","$","concat","renderIntentFilters","map","intentFilter","autoVerify","undefined","action","renderIntentFilterData","category","renderIntentFilterCategory","Array","isArray","Boolean","datum","Object","entries","reduce","prev","key","cat"],"sources":["../../src/android/IntentFilters.ts"],"sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow, ManifestIntentFilter } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n\nconst GENERATED_TAG = 'data-generated';\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  // Always ensure old tags are removed.\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n  // Remove all generated tags from previous runs...\n  if (mainActivity['intent-filter']?.length) {\n    mainActivity['intent-filter'] = mainActivity['intent-filter'].filter(\n      (value) => value.$?.[GENERATED_TAG] !== 'true'\n    );\n  }\n\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    renderIntentFilters(intentFilters)\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(\n  intentFilters: AndroidIntentFilters\n): ManifestIntentFilter[] {\n  return intentFilters.map((intentFilter) => {\n    // <intent-filter>\n    return {\n      $: {\n        'android:autoVerify': intentFilter.autoVerify ? 'true' : undefined,\n        // Add a custom \"generated\" tag that we can query later to remove.\n        [GENERATED_TAG]: 'true',\n      },\n      action: [\n        // <action android:name=\"android.intent.action.VIEW\"/>\n        {\n          $: {\n            'android:name': `android.intent.action.${intentFilter.action}`,\n          },\n        },\n      ],\n      data: renderIntentFilterData(intentFilter.data),\n      category: renderIntentFilterCategory(intentFilter.category),\n    };\n  });\n}\n\n/** Like `<data android:scheme=\"exp\"/>` */\nfunction renderIntentFilterData(data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]) {\n  return (Array.isArray(data) ? data : [data]).filter(Boolean).map((datum) => ({\n    $: Object.entries(datum ?? {}).reduce(\n      (prev, [key, value]) => ({ ...prev, [`android:${key}`]: value }),\n      {}\n    ),\n  }));\n}\n\n/** Like `<category android:name=\"android.intent.category.DEFAULT\"/>` */\nfunction renderIntentFilterCategory(category?: string | string[]) {\n  return (Array.isArray(category) ? category : [category]).filter(Boolean).map((cat) => ({\n    $: {\n      'android:name': `android.intent.category.${cat}`,\n    },\n  }));\n}\n"],"mappings":"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"}
=======
{"version":3,"sources":["../../src/android/IntentFilters.ts"],"names":["withAndroidIntentFilters","setAndroidIntentFilters","getIntentFilters","config","android","intentFilters","androidManifest","length","intentFiltersXML","renderIntentFilters","join","parser","Parser","intentFiltersJSON","parseStringPromise","mainActivity","concat","map","intentFilter","autoVerify","renderIntentFilterData","data","action","renderIntentFilterCategory","category","renderIntentFilterDatumEntries","datum","entries","key","value","Object","push","Array","isArray","filter","Boolean","cat"],"mappings":";;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAEO,MAAMA,wBAAwB,GAAG,mDACtCC,uBADsC,EAEtC,0BAFsC,CAAjC;;;AAKA,SAASC,gBAAT,CAA0BC,MAA1B,EAAqF;AAAA;;AAC1F,qDAAOA,MAAM,CAACC,OAAd,oDAAO,gBAAgBC,aAAvB,yEAAwC,EAAxC;AACD;;AAEM,eAAeJ,uBAAf,CACLE,MADK,EAELG,eAFK,EAGqB;AAAA;;AAC1B,QAAMD,aAAa,GAAGH,gBAAgB,CAACC,MAAD,CAAtC;;AACA,MAAI,CAACE,aAAa,CAACE,MAAnB,EAA2B;AACzB,WAAOD,eAAP;AACD;;AAED,QAAME,gBAAgB,GAAGC,mBAAmB,CAACJ,aAAD,CAAnB,CAAmCK,IAAnC,CAAwC,EAAxC,CAAzB;AACA,QAAMC,MAAM,GAAG,KAAIC,gBAAJ,GAAf;AACA,QAAMC,iBAAiB,GAAG,MAAMF,MAAM,CAACG,kBAAP,CAA0BN,gBAA1B,CAAhC;AAEA,QAAMO,YAAY,GAAG,wCAAuBT,eAAvB,CAArB;AAEAS,EAAAA,YAAY,CAAC,eAAD,CAAZ,2BAAgCA,YAAY,CAAC,eAAD,CAA5C,yDAAgC,qBAA+BC,MAA/B,CAC9BH,iBAAiB,CAAC,eAAD,CADa,CAAhC;AAIA,SAAOP,eAAP;AACD;;AAEc,SAASG,mBAAT,CAA6BJ,aAA7B,EAA4E;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOA,aAAa,CAACY,GAAd,CAAkBC,YAAY,IAAI;AACvC,UAAMC,UAAU,GAAGD,YAAY,CAACC,UAAb,GAA0B,4BAA1B,GAAyD,EAA5E;AAEA,WAAQ,iBAAgBA,UAAW;AACvC,QAAQC,sBAAsB,CAACF,YAAY,CAACG,IAAd,CAAoB;AAClD,oDAAoDH,YAAY,CAACI,MAAO;AACxE,QAAQC,0BAA0B,CAACL,YAAY,CAACM,QAAd,CAAwB;AAC1D,qBAJI;AAKD,GARM,CAAP;AASD;;AAED,SAASC,8BAAT,CAAwCC,KAA+B,GAAG,EAA1E,EAAsF;AACpF,QAAMC,OAAiB,GAAG,EAA1B;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACH,OAAP,CAAeD,KAAf,CAA3B,EAAkD;AAChDC,IAAAA,OAAO,CAACI,IAAR,CAAc,WAAUH,GAAI,KAAIC,KAAM,GAAtC;AACD;;AACD,SAAOF,OAAO,CAACjB,IAAR,CAAa,GAAb,CAAP;AACD;;AAED,SAASU,sBAAT,CACEC,IADF,EAEU;AACR,SAAO,CAACW,KAAK,CAACC,OAAN,CAAcZ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA9B,EACJa,MADI,CACGC,OADH,EAEJlB,GAFI,CAEAS,KAAK,IAAK,SAAQD,8BAA8B,CAACC,KAAD,CAAQ,IAFxD,EAGJhB,IAHI,CAGC,IAHD,CAAP;AAID;;AAED,SAASa,0BAAT,CAAoCC,QAApC,EAA0E;AACxE,SAAO,CAACQ,KAAK,CAACC,OAAN,CAAcT,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAtC,EACJU,MADI,CACGC,OADH,EAEJlB,GAFI,CAEAmB,GAAG,IAAK,mDAAkDA,GAAI,KAF9D,EAGJ1B,IAHI,CAGC,IAHD,CAAP;AAID","sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\nimport { Parser } from 'xml2js';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n// TODO: make it so intent filters aren't written again if you run the command again\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport async function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): Promise<AndroidManifest> {\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  const intentFiltersXML = renderIntentFilters(intentFilters).join('');\n  const parser = new Parser();\n  const intentFiltersJSON = await parser.parseStringPromise(intentFiltersXML);\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    intentFiltersJSON['intent-filter']\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(intentFilters: AndroidIntentFilters): string[] {\n  // returns an array of <intent-filter> tags:\n  // [\n  //   `<intent-filter>\n  //     <data android:scheme=\"exp\"/>\n  //     <data android:scheme=\"exps\"/>\n  //\n  //     <action android:name=\"android.intent.action.VIEW\"/>\n  //\n  //     <category android:name=\"android.intent.category.DEFAULT\"/>\n  //     <category android:name=\"android.intent.category.BROWSABLE\"/>\n  //   </intent-filter>`,\n  //   ...\n  // ]\n  return intentFilters.map(intentFilter => {\n    const autoVerify = intentFilter.autoVerify ? ' android:autoVerify=\"true\"' : '';\n\n    return `<intent-filter${autoVerify}>\n      ${renderIntentFilterData(intentFilter.data)}\n      <action android:name=\"android.intent.action.${intentFilter.action}\"/>\n      ${renderIntentFilterCategory(intentFilter.category)}\n    </intent-filter>`;\n  });\n}\n\nfunction renderIntentFilterDatumEntries(datum: AndroidIntentFiltersData = {}): string {\n  const entries: string[] = [];\n  for (const [key, value] of Object.entries(datum)) {\n    entries.push(`android:${key}=\"${value}\"`);\n  }\n  return entries.join(' ');\n}\n\nfunction renderIntentFilterData(\n  data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]\n): string {\n  return (Array.isArray(data) ? data : [data])\n    .filter(Boolean)\n    .map(datum => `<data ${renderIntentFilterDatumEntries(datum)}/>`)\n    .join('\\n');\n}\n\nfunction renderIntentFilterCategory(category?: string | string[]): string {\n  return (Array.isArray(category) ? category : [category])\n    .filter(Boolean)\n    .map(cat => `<category android:name=\"android.intent.category.${cat}\"/>`)\n    .join('\\n');\n}\n"],"file":"IntentFilters.js"}
>>>>>>> apetey
