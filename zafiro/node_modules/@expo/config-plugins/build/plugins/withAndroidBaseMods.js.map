<<<<<<< HEAD
{"version":3,"file":"withAndroidBaseMods.js","names":["_fs","data","require","_path","_interopRequireDefault","_android","_XML","_sortObject","_createBaseMod","obj","__esModule","default","readFile","writeFile","promises","getAndroidManifestTemplate","config","_config$android$packa","_config$android","parseXMLAsync","android","package","sortAndroidManifest","manifest","sortObject","reverseSortString","Array","isArray","sort","a","b","$","application","map","sortObjWithOrder","defaultProviders","dangerous","provider","getFilePath","read","filePath","modResults","write","isIntrospective","modRequest","platformProjectRoot","path","join","Manifest","readAndroidManifestAsync","error","introspect","writeAndroidManifestAsync","gradleProperties","Properties","parsePropertiesFile","propertiesListToString","strings","projectRoot","Strings","getProjectStringsXMLPathAsync","Resources","readResourcesXMLAsync","resources","writeXMLAsync","xml","colors","Colors","getProjectColorsXMLPathAsync","colorsNight","kind","styles","Styles","getProjectStylesXMLPathAsync","_styles$resources$$","fallback","projectBuildGradle","Paths","getProjectBuildGradleFilePath","getFileInfo","contents","settingsGradle","getSettingsGradleFilePath","appBuildGradle","getAppBuildGradleFilePath","mainActivity","getProjectFilePath","mainApplication","withAndroidBaseMods","providers","props","withGeneratedBaseMods","platform","getAndroidModFileProviders"],"sources":["../../src/plugins/withAndroidBaseMods.ts"],"sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { AndroidManifest } from '../android/Manifest';\nimport { parseXMLAsync, writeXMLAsync } from '../utils/XML';\nimport { reverseSortString, sortObject, sortObjWithOrder } from '../utils/sortObject';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nfunction getAndroidManifestTemplate(config: ExportedConfig) {\n  // Keep in sync with https://github.com/expo/expo/blob/master/templates/expo-template-bare-minimum/android/app/src/main/AndroidManifest.xml\n  // TODO: Read from remote template when possible\n  return parseXMLAsync(`\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"${\n    config.android?.package ?? 'com.placeholder.appid'\n  }\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n    <!-- These require runtime permissions on M -->\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <!-- END OPTIONAL PERMISSIONS -->\n\n    <queries>\n      <!-- Support checking for http(s) links via the Linking API -->\n      <intent>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" />\n      </intent>\n    </queries>\n\n    <application\n      android:name=\".MainApplication\"\n      android:label=\"@string/app_name\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:allowBackup=\"false\"\n      android:theme=\"@style/AppTheme\"\n      android:usesCleartextTraffic=\"true\"\n    >\n      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\"/>\n      <meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\"/>\n      <activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"\n        android:theme=\"@style/Theme.App.SplashScreen\"\n      >\n        <intent-filter>\n          <action android:name=\"android.intent.action.MAIN\"/>\n          <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n      </activity>\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n    </application>\n  </manifest>\n  `) as Promise<AndroidManifest>;\n}\n\nexport function sortAndroidManifest(obj: AndroidManifest) {\n  if (obj.manifest) {\n    // Reverse sort so application is last and permissions are first\n    obj.manifest = sortObject(obj.manifest, reverseSortString);\n\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      // Sort permissions alphabetically\n      obj.manifest['uses-permission'].sort((a, b) => {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n\n    if (Array.isArray(obj.manifest.application)) {\n      // reverse sort applications so activity is towards the end and meta-data is towards the front.\n      obj.manifest.application = obj.manifest.application.map((application) => {\n        application = sortObjWithOrder(application, ['meta-data', 'service', 'activity']);\n\n        if (Array.isArray(application['meta-data'])) {\n          // Sort metadata alphabetically\n          application['meta-data'].sort((a, b) => {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath, config) {\n      try {\n        return await Manifest.readAndroidManifestAsync(filePath);\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return await getAndroidManifestTemplate(config);\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath, config) {\n      try {\n        return await Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return [];\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Strings.getProjectStringsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Styles.getProjectStylesXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      let styles: Resources.ResourceXML = { resources: {} };\n\n      try {\n        // Adds support for `tools:x`\n        styles = await Resources.readResourcesXMLAsync({\n          path: filePath,\n          fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n        });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainApplication: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n"],"mappings":"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"}
=======
{"version":3,"sources":["../../src/plugins/withAndroidBaseMods.ts"],"names":["readFile","writeFile","promises","defaultProviders","dangerous","getFilePath","read","filePath","modResults","write","manifest","modRequest","platformProjectRoot","path","join","Manifest","readAndroidManifestAsync","writeAndroidManifestAsync","gradleProperties","Properties","parsePropertiesFile","propertiesListToString","strings","projectRoot","Strings","getProjectStringsXMLPathAsync","Resources","readResourcesXMLAsync","xml","colors","Colors","getProjectColorsXMLPathAsync","colorsNight","kind","styles","Styles","getProjectStylesXMLPathAsync","fallback","resources","$","projectBuildGradle","Paths","getProjectBuildGradleFilePath","getFileInfo","contents","settingsGradle","getSettingsGradleFilePath","appBuildGradle","getAppBuildGradleFilePath","mainActivity","getProjectFilePath","withAndroidBaseMods","config","providers","props","platform","getAndroidModFileProviders","getAndroidIntrospectModFileProviders","createIntrospectionProvider","modName","fallbackContents","realProvider","Function","package","android","application","activity","action","category"],"mappings":"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","sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { writeXMLAsync } from '../utils/XML';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath) {\n      return await Manifest.readAndroidManifestAsync(filePath);\n    },\n    async write(filePath, { modResults }) {\n      await Manifest.writeAndroidManifestAsync(filePath, modResults);\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath) {\n      return Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Strings.getProjectStringsXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Colors.getProjectColorsXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Styles.getProjectStylesXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      // Adds support for `tools:x`\n      const styles = await Resources.readResourcesXMLAsync({\n        path: filePath,\n        fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n      });\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n\nexport function getAndroidIntrospectModFileProviders(): Omit<\n  AndroidDefaultProviders,\n  // Get rid of mods that could potentially fail by being empty.\n  'dangerous' | 'projectBuildGradle' | 'settingsGradle' | 'appBuildGradle' | 'mainActivity'\n> {\n  const createIntrospectionProvider = (\n    modName: keyof typeof defaultProviders,\n    { fallbackContents }: { fallbackContents: any }\n  ) => {\n    const realProvider = defaultProviders[modName];\n    return provider<any>({\n      async getFilePath(...props) {\n        try {\n          return await realProvider.getFilePath(...props);\n        } catch {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n      },\n      async read(...props) {\n        try {\n          return await realProvider.read(...props);\n        } catch {\n          // fallback if a file is missing in introspection mode.\n          if (fallbackContents instanceof Function) {\n            return fallbackContents(...props);\n          }\n          return fallbackContents;\n        }\n      },\n      async write() {\n        // write nothing in introspection mode.\n      },\n    });\n  };\n\n  // dangerous should never be added\n  return {\n    manifest: createIntrospectionProvider('manifest', {\n      fallbackContents(filePath: string, config: ExportedConfig) {\n        return {\n          manifest: {\n            $: {\n              'xmlns:android': 'http://schemas.android.com/apk/res/android',\n              package: config.android?.package ?? 'com.placeholder.appid',\n            },\n            'uses-permission': [\n              {\n                $: {\n                  'android:name': 'android.permission.INTERNET',\n                },\n              },\n            ],\n            application: [\n              {\n                $: {\n                  'android:name': '.MainApplication',\n                  'android:label': '@string/app_name',\n                  'android:icon': '@mipmap/ic_launcher',\n                  'android:roundIcon': '@mipmap/ic_launcher_round',\n                  'android:allowBackup': 'false',\n                  'android:theme': '@style/AppTheme',\n                },\n                activity: [\n                  {\n                    $: {\n                      'android:name': '.MainActivity',\n                      'android:label': '@string/app_name',\n                      'android:configChanges':\n                        'keyboard|keyboardHidden|orientation|screenSize|uiMode',\n                      'android:launchMode': 'singleTask',\n                      'android:windowSoftInputMode': 'adjustResize',\n                      'android:theme': '@style/Theme.App.SplashScreen',\n                    },\n                    'intent-filter': [\n                      {\n                        action: [\n                          {\n                            $: {\n                              'android:name': 'android.intent.action.MAIN',\n                            },\n                          },\n                        ],\n                        category: [\n                          {\n                            $: {\n                              'android:name': 'android.intent.category.LAUNCHER',\n                            },\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                  {\n                    $: {\n                      'android:name': 'com.facebook.react.devsupport.DevSettingsActivity',\n                    },\n                  },\n                ],\n              },\n            ],\n          },\n        } as Manifest.AndroidManifest;\n      },\n    }),\n    gradleProperties: createIntrospectionProvider('gradleProperties', { fallbackContents: [] }),\n    strings: createIntrospectionProvider('strings', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    colors: createIntrospectionProvider('colors', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    colorsNight: createIntrospectionProvider('colorsNight', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    styles: createIntrospectionProvider('styles', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    // projectBuildGradle: createIntrospectionProvider('projectBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // settingsGradle: createIntrospectionProvider('settingsGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // appBuildGradle: createIntrospectionProvider('appBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // mainActivity: createIntrospectionProvider('mainActivity', {\n    //   fallbackContents: {\n    //     path: '',\n    //     contents: '',\n    //     language: 'java',\n    //   } as Paths.ApplicationProjectFile,\n    // }),\n  };\n}\n"],"file":"withAndroidBaseMods.js"}
>>>>>>> apetey
