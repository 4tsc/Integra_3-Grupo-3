<<<<<<< HEAD
{"version":3,"file":"withIosBaseMods.js","names":["_jsonFile","data","_interopRequireDefault","require","_plist","_assert","_fs","_interopRequireWildcard","_path","_xcode","_ios","_Entitlements","_Xcodeproj","_getInfoPlistPath","_modules","_sortObject","_warnings","_createBaseMod","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","readFile","writeFile","promises","getEntitlementsPlistTemplate","getInfoPlistTemplate","CFBundleDevelopmentRegion","CFBundleExecutable","CFBundleIdentifier","CFBundleName","CFBundlePackageType","CFBundleInfoDictionaryVersion","CFBundleSignature","LSRequiresIPhoneOS","NSAppTransportSecurity","NSAllowsArbitraryLoads","NSExceptionDomains","localhost","NSExceptionAllowsInsecureHTTPLoads","UILaunchStoryboardName","UIRequiredDeviceCapabilities","UIViewControllerBasedStatusBarAppearance","UIStatusBarStyle","CADisableMinimumFrameDurationOnPhone","defaultProviders","dangerous","provider","getFilePath","read","write","appDelegate","modRequest","projectRoot","Paths","getAppDelegateFilePath","filePath","getFileInfo","modResults","contents","expoPlist","isIntrospective","platformProjectRoot","projectName","supportingDirectory","path","join","resolve","introspect","plist","parse","error","build","sortObject","xcodeproj","getPBXProjectPath","project","xcode","parseSync","writeSync","infoPlist","config","getPbxproj","infoPlistBuildProperty","getInfoPlistPathFromPbxproj","infoPlistPath","fileExists","addWarningIOS","getInfoPlistPath","ios","assert","entitlements","_Entitlements$getEnti","ensureApplicationTargetEntitlementsFileConfigured","Entitlements","getEntitlementsPath","ignoreExistingNativeFiles","fs","existsSync","podfileProperties","results","JsonFile","readAsync","writeAsync","withIosBaseMods","providers","props","withGeneratedBaseMods","platform","getIosModFileProviders"],"sources":["../../src/plugins/withIosBaseMods.ts"],"sourcesContent":["import JsonFile, { JSONObject, JSONValue } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs, { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { ensureApplicationTargetEntitlementsFileConfigured } from '../ios/Entitlements';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getPbxproj } from '../ios/utils/Xcodeproj';\nimport { getInfoPlistPathFromPbxproj } from '../ios/utils/getInfoPlistPath';\nimport { fileExists } from '../utils/modules';\nimport { sortObject } from '../utils/sortObject';\nimport { addWarningIOS } from '../utils/warnings';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nfunction getEntitlementsPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {};\n}\n\nfunction getInfoPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true,\n        },\n      },\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault',\n    CADisableMinimumFrameDurationOnPhone: true,\n  };\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      // TODO: Get application AppDelegate file from pbxproj.\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return plist.parse(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (introspect) {\n          return {};\n        }\n        throw error;\n      }\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await writeFile(filePath, plist.build(sortObject(modResults)));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    isIntrospective: true,\n    async getFilePath(config) {\n      let project: xcode.XcodeProject | null = null;\n      try {\n        project = getPbxproj(config.modRequest.projectRoot);\n      } catch {\n        // noop\n      }\n\n      // Only check / warn if a project actually exists, this'll provide\n      // more accurate warning messages for users in managed projects.\n      if (project) {\n        const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(project);\n\n        if (infoPlistBuildProperty) {\n          //: [root]/myapp/ios/MyApp/Info.plist\n          const infoPlistPath = path.join(\n            //: myapp/ios\n            config.modRequest.platformProjectRoot,\n            //: MyApp/Info.plist\n            infoPlistBuildProperty\n          );\n          if (fileExists(infoPlistPath)) {\n            return infoPlistPath;\n          }\n          addWarningIOS(\n            'mods.ios.infoPlist',\n            `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`\n          );\n        } else {\n          addWarningIOS('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n        }\n      }\n      try {\n        // Fallback on glob...\n        return await Paths.getInfoPlistPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      let modResults: InfoPlist;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Info.plist is empty');\n        modResults = plist.parse(contents) as InfoPlist;\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the infoPlist object from the Expo config.\n        modResults = getInfoPlistTemplate();\n      }\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return config.ios.infoPlist!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    isIntrospective: true,\n\n    async getFilePath(config) {\n      try {\n        ensureApplicationTargetEntitlementsFileConfigured(config.modRequest.projectRoot);\n        return Entitlements.getEntitlementsPath(config.modRequest.projectRoot) ?? '';\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n\n    async read(filePath, config) {\n      let modResults: JSONObject;\n      try {\n        if (!config.modRequest.ignoreExistingNativeFiles && fs.existsSync(filePath)) {\n          const contents = await readFile(filePath, 'utf8');\n          assert(contents, 'Entitlements plist is empty');\n          modResults = plist.parse(contents);\n        } else {\n          modResults = getEntitlementsPlistTemplate();\n        }\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the template file.\n        modResults = getEntitlementsPlistTemplate();\n      }\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return config.ios.entitlements!;\n    },\n\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n\n  // Append a rule to supply Podfile.properties.json data to mods on `mods.ios.podfileProperties`\n  podfileProperties: provider<Record<string, JSONValue>>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    async read(filePath) {\n      let results: Record<string, JSONValue> = {};\n      try {\n        results = await JsonFile.readAsync(filePath);\n      } catch {}\n      return results;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await JsonFile.writeAsync(filePath, modResults);\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n"],"mappings":"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"}
=======
{"version":3,"sources":["../../src/plugins/withIosBaseMods.ts"],"names":["readFile","writeFile","promises","defaultProviders","dangerous","getFilePath","read","write","appDelegate","modRequest","projectRoot","Paths","getAppDelegateFilePath","filePath","getFileInfo","modResults","contents","expoPlist","platformProjectRoot","projectName","supportingDirectory","path","join","resolve","plist","parse","build","xcodeproj","getPBXProjectPath","project","xcode","parseSync","writeSync","infoPlist","config","infoPlistBuildProperty","infoPlistPath","getInfoPlistPath","ios","entitlements","Entitlements","getEntitlementsPath","withIosBaseMods","providers","props","platform","getIosModFileProviders","getIosIntrospectModFileProviders","createIntrospectionProvider","modName","fallbackContents","realProvider","CFBundleDevelopmentRegion","CFBundleExecutable","CFBundleIdentifier","CFBundleName","CFBundlePackageType","CFBundleInfoDictionaryVersion","CFBundleSignature","LSRequiresIPhoneOS","NSAppTransportSecurity","NSAllowsArbitraryLoads","NSExceptionDomains","localhost","NSExceptionAllowsInsecureHTTPLoads","UILaunchStoryboardName","UIRequiredDeviceCapabilities","UIViewControllerBasedStatusBarAppearance","UIStatusBarStyle"],"mappings":"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","sourcesContent":["import { JSONObject } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getInfoPlistPathFromPbxproj } from '../ios/utils/getInfoPlistPath';\nimport { fileExists } from '../utils/modules';\nimport { addWarningIOS } from '../utils/warnings';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath) {\n      return plist.parse(await readFile(filePath, 'utf8'));\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, plist.build(modResults));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    getFilePath(config) {\n      const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(config.modRequest.projectRoot);\n\n      if (infoPlistBuildProperty) {\n        //: [root]/myapp/ios/MyApp/Info.plist\n        const infoPlistPath = path.join(\n          //: myapp/ios\n          config.modRequest.platformProjectRoot,\n          //: MyApp/Info.plist\n          infoPlistBuildProperty\n        );\n        if (fileExists(infoPlistPath)) {\n          return infoPlistPath;\n        }\n        addWarningIOS(\n          'mods.ios.infoPlist',\n          `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`\n        );\n      } else {\n        addWarningIOS('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n      }\n      // Fallback on glob...\n      return Paths.getInfoPlistPath(config.modRequest.projectRoot);\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      const contents = await readFile(filePath, 'utf8');\n      assert(contents, 'Info.plist is empty');\n      const modResults = plist.parse(contents) as InfoPlist;\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return config.ios.infoPlist!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) config.ios = {};\n      config.ios.infoPlist = config.modResults;\n\n      await writeFile(filePath, plist.build(config.modResults));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    getFilePath(config) {\n      return Entitlements.getEntitlementsPath(config.modRequest.projectRoot);\n    },\n    async read(filePath, config) {\n      const contents = await readFile(filePath, 'utf8');\n      assert(contents, 'Entitlements plist is empty');\n      const modResults = plist.parse(contents);\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return config.ios.entitlements!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      await writeFile(filePath, plist.build(config.modResults));\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n\n/**\n * Get file providers that run introspection without modifying the actual native source code.\n * This can be used to determine the absolute static `ios.infoPlist` and `ios.entitlements` objects.\n *\n * @returns\n */\nexport function getIosIntrospectModFileProviders(): Omit<\n  IosDefaultProviders,\n  // Get rid of mods that could potentially fail by being empty.\n  'dangerous' | 'xcodeproj' | 'appDelegate'\n> {\n  const createIntrospectionProvider = (\n    modName: keyof typeof defaultProviders,\n    { fallbackContents }: { fallbackContents: any }\n  ) => {\n    const realProvider = defaultProviders[modName];\n    return provider<any>({\n      async getFilePath(...props) {\n        try {\n          return await realProvider.getFilePath(...props);\n        } catch {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n      },\n      async read(...props) {\n        try {\n          return await realProvider.read(...props);\n        } catch {\n          // fallback if a file is missing in introspection mode.\n          return fallbackContents;\n        }\n      },\n      async write() {\n        // write nothing in introspection mode.\n      },\n    });\n  };\n\n  // dangerous should never be added\n  return {\n    // appDelegate: createIntrospectionProvider('appDelegate', {\n    //   fallbackContents: {\n    //     path: '',\n    //     contents: '',\n    //     language: 'objc',\n    //   } as Paths.AppDelegateProjectFile,\n    // }),\n    // xcodeproj: createIntrospectionProvider('xcodeproj', {\n    //   fallbackContents: {} as XcodeProject,\n    // }),\n    expoPlist: createIntrospectionProvider('expoPlist', {\n      fallbackContents: {} as JSONObject,\n    }),\n\n    infoPlist: {\n      async getFilePath(...props) {\n        try {\n          return await defaultProviders.infoPlist.getFilePath(...props);\n        } catch {\n          return '';\n        }\n      },\n\n      async read(filePath, config, props) {\n        try {\n          return await defaultProviders.infoPlist.read(filePath, config, props);\n        } catch {\n          // Fallback to using the infoPlist object from the Expo config.\n          return (\n            config.ios?.infoPlist ?? {\n              CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n              CFBundleExecutable: '$(EXECUTABLE_NAME)',\n              CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n              CFBundleName: '$(PRODUCT_NAME)',\n              CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n              CFBundleInfoDictionaryVersion: '6.0',\n              CFBundleSignature: '????',\n              LSRequiresIPhoneOS: true,\n              NSAppTransportSecurity: {\n                NSAllowsArbitraryLoads: true,\n                NSExceptionDomains: {\n                  localhost: {\n                    NSExceptionAllowsInsecureHTTPLoads: true,\n                  },\n                },\n              },\n              UILaunchStoryboardName: 'SplashScreen',\n              UIRequiredDeviceCapabilities: ['armv7'],\n              UIViewControllerBasedStatusBarAppearance: false,\n              UIStatusBarStyle: 'UIStatusBarStyleDefault',\n            }\n          );\n        }\n      },\n\n      write(filePath, config) {\n        // Update the contents of the static infoPlist object\n        if (!config.ios) config.ios = {};\n\n        config.ios.infoPlist = config.modResults;\n      },\n    },\n\n    entitlements: {\n      async getFilePath(...props) {\n        try {\n          return await defaultProviders.entitlements.getFilePath(...props);\n        } catch {\n          return '';\n        }\n      },\n\n      async read(filePath, config, props) {\n        try {\n          return await defaultProviders.entitlements.read(filePath, config, props);\n        } catch {\n          // Fallback to using the entitlements object from the Expo config.\n          return config.ios?.entitlements ?? {};\n        }\n      },\n\n      write(filePath, config) {\n        // Update the contents of the static entitlements object\n        if (!config.ios) config.ios = {};\n\n        config.ios.entitlements = config.modResults;\n      },\n    },\n  };\n}\n"],"file":"withIosBaseMods.js"}
>>>>>>> apetey
